import mongoose from 'mongoose';
import Character from './models/characterModel.js';
import dotenv from 'dotenv';

// Cargar variables de entorno
dotenv.config();

// Datos de ataques por personaje
const ataquesPorPersonaje = {
  1: { // Agumon
    normal: "Garra F√©rrea",
    especial: "Llama Beb√©",
    ultimate: "Gran Flama Evolutiva"
  },
  2: { // Gabumon
    normal: "Zarpazo √Årtico",
    especial: "Fuego Azul",
    ultimate: "Llama de Lobo"
  },
  3: { // Patamon
    normal: "Vuelo Picado",
    especial: "Aire Explosivo",
    ultimate: "Golpe del Juicio"
  },
  4: { // Gatomon
    normal: "Golpe Felino",
    especial: "Garra Rel√°mpago",
    ultimate: "Anillo de la Reina"
  },
  5: { // Tentomon
    normal: "Antena Golpeadora",
    especial: "Rayo S√∫bito",
    ultimate: "Tormenta Megaelectro"
  },
  6: { // Palmon
    normal: "L√°tigo Floral",
    especial: "Esporas Venenosas",
    ultimate: "Flor Destructor"
  },
  7: { // Biyomon
    normal: "Pico Cortante",
    especial: "Torbellino de Fuego",
    ultimate: "Ave Flam√≠gera"
  },
  8: { // Gomamon
    normal: "Mordisco Marino",
    especial: "Oleaje Cortante",
    ultimate: "Tsunami √Årtico"
  },
  9: { // Veemon
    normal: "Pu√±etazo Vee",
    especial: "V-Impacto",
    ultimate: "Golpe Final Extremo"
  },
  10: { // Wormmon
    normal: "Zancada Sigilosa",
    especial: "L√°tigo de Telara√±a",
    ultimate: "Ca√±√≥n Destructor Insecto"
  },
  11: { // Hawkmon
    normal: "Golpe de Ala",
    especial: "Disparo de Pluma",
    ultimate: "C√≥ndor Destructor"
  },
  12: { // Armadillomon
    normal: "Rodillazo R√≠gido",
    especial: "Excavaci√≥n Letal",
    ultimate: "Armadura de Tierra Absoluta"
  },
  13: { // Terriermon
    normal: "Oreja Giratoria",
    especial: "R√°faga Espiral",
    ultimate: "Trueno de la Doble Espiral"
  },
  14: { // Renamon
    normal: "Golpe Sombr√≠o",
    especial: "Llama de Zorra",
    ultimate: "Explosi√≥n Diamante"
  },
  15: { // Impmon
    normal: "Lanzallamas Travieso",
    especial: "Bola Oscura",
    ultimate: "Fuego del Caos"
  },
  16: { // DemiDevimon
    normal: "Picotazo Venenoso",
    especial: "Ala Sombr√≠a",
    ultimate: "Maldici√≥n Lunar"
  },
  17: { // BlackAgumon
    normal: "Garra Negra",
    especial: "Llama Oscura",
    ultimate: "Explosi√≥n Infernal"
  },
  18: { // Lopmon
    normal: "Orejas L√°tigo",
    especial: "Lluvia de Energ√≠a",
    ultimate: "Juicio Dual"
  },
  19: { // Salamon
    normal: "Mordida Celestial",
    especial: "Luz Purificadora",
    ultimate: "Rugido de la Esperanza"
  },
  20: { // Elecmon
    normal: "Zarpazo Est√°tico",
    especial: "Descarga Voltaica",
    ultimate: "Rayo del Trueno Alfa"
  }
};

// Funci√≥n para conectar a MongoDB
async function connectDB() {
    try {
        const mongoURI = process.env.MONGODB_URI || 'mongodb://localhost:27017/superheroes';
        await mongoose.connect(mongoURI);
        console.log('‚úÖ Conectado a MongoDB');
    } catch (error) {
        console.error('‚ùå Error conectando a MongoDB:', error.message);
        process.exit(1);
    }
}

// Funci√≥n para actualizar los ataques
async function updateAttacks() {
    try {
        console.log('üöÄ Iniciando actualizaci√≥n de ataques Digimon...\n');
        
        let updatedCount = 0;
        
        for (const [id, ataques] of Object.entries(ataquesPorPersonaje)) {
            const result = await Character.updateOne(
                { id: parseInt(id) },
                { $set: { ataques: ataques } }
            );
            
            if (result.modifiedCount > 0) {
                updatedCount++;
                const character = await Character.findOne({ id: parseInt(id) });
                console.log(`‚úÖ ${character.nombre}: ${ataques.normal} / ${ataques.especial} / ${ataques.ultimate}`);
            }
        }
        
        console.log(`\nüìä Resumen:`);
        console.log(`   - Personajes actualizados: ${updatedCount}`);
        console.log(`   - Total de ataques agregados: ${updatedCount * 3}`);
        
    } catch (error) {
        console.error('‚ùå Error durante la actualizaci√≥n:', error.message);
    }
}

// Funci√≥n principal
async function main() {
    await connectDB();
    await updateAttacks();
    
    console.log('\nüèÅ Proceso completado');
    process.exit(0);
}

// Manejar errores no capturados
process.on('unhandledRejection', (err) => {
    console.error('‚ùå Error no manejado:', err);
    process.exit(1);
});

// Ejecutar el script
main(); 