class Character {
<<<<<<< HEAD
    constructor(id, nombre, alias, tipo, ciudad, equipo, stats = {}, level = 1) {
=======
    constructor(id, nombre, alias, tipo, ciudad, equipo, stats = {}, attacks = undefined) {
>>>>>>> c1b25f76b8ef104b0d97f1bf2c0347865902df18
        this.id = id;
        this.nombre = nombre;
        this.alias = alias;
        this.tipo = tipo; // 'heroe' o 'villano'
        this.ciudad = ciudad;
        this.equipo = equipo;
        this.level = Math.max(1, Math.min(5, level)); // Nivel entre 1 y 5
        // Estad√≠sticas base
        const baseStats = {
            health: stats.health || 100,
            maxHealth: stats.maxHealth || 100,
            attack: stats.attack || 50,
            defense: stats.defense || 30,
            speed: stats.speed || 40,
            ...stats
        };
<<<<<<< HEAD
        // Aplicar bonificaciones de nivel
        this.stats = this.applyLevelBonuses(baseStats);
        // Definir ataques especiales basados en el alias del personaje
        this.specialAttacks = this.getSpecialAttacks();
=======
        // Usar ataques del JSON si existen, si no usar los especiales por alias
        if (Array.isArray(attacks) && attacks.length > 0) {
            this.attacks = attacks;
        } else {
            this.attacks = this.getSpecialAttacks();
        }
        this.specialAttacks = this.attacks;
        this.finalAttackUsed = false;
        this.shieldUsed = false;
>>>>>>> c1b25f76b8ef104b0d97f1bf2c0347865902df18
    }

    applyLevelBonuses(baseStats) {
        // +20% por cada nivel sobre el base (nivel 1 = 1.0, nivel 2 = 1.2, ..., nivel 5 = 1.8)
        const levelMultiplier = 1 + (this.level - 1) * 0.2;
        return {
            health: Math.round(baseStats.health * levelMultiplier),
            maxHealth: Math.round(baseStats.maxHealth * levelMultiplier),
            attack: Math.round(baseStats.attack * levelMultiplier),
            defense: Math.round(baseStats.defense * levelMultiplier),
            speed: Math.round(baseStats.speed * levelMultiplier)
        };
    }

    getSpecialAttacks() {
        const attacks = {
            'Spider-Man': [
                { name: 'üï∑Ô∏è Lanzamiento de Telara√±a', damage: 1.2, description: 'Lanza una telara√±a que reduce la velocidad del oponente' },
                { name: 'üï∏Ô∏è Red de Telara√±a', damage: 1.5, description: 'Crea una red que atrapa al enemigo' },
                { name: 'ü¶∏ Sentido Ar√°cnido', damage: 1.8, description: 'Usa sus sentidos ar√°cnidos para un ataque preciso' }
            ],
            'Iron Man': [
                { name: '‚ö° Rayo Repulsor', damage: 1.3, description: 'Dispara un rayo de energ√≠a desde su pecho' },
                { name: 'üöÄ Misil Guiado', damage: 1.6, description: 'Lanza un misil que sigue al objetivo' },
                { name: 'üõ°Ô∏è Escudo de Energ√≠a', damage: 1.4, description: 'Crea un escudo que refleja el da√±o' }
            ],
            'Batman': [
                { name: 'ü¶á Batarang', damage: 1.2, description: 'Lanza un batarang con precisi√≥n mortal' },
                { name: 'üí• Granada de Humo', damage: 1.3, description: 'Crea una cortina de humo para confundir' },
                { name: 'ü•ã Artes Marciales', damage: 1.7, description: 'Combina t√©cnicas de combate cuerpo a cuerpo' }
            ],
            'Superman': [
                { name: 'üëÅÔ∏è Rayos X', damage: 1.4, description: 'Usa su visi√≥n de rayos X para atacar' },
                { name: 'üí® Aliento Helado', damage: 1.5, description: 'Congela al oponente con su aliento' },
                { name: 'üí™ Pu√±etazo S√∫per', damage: 2.0, description: 'Un pu√±etazo con toda su fuerza kryptoniana' }
            ],
            'Wonder Woman': [
                { name: 'üõ°Ô∏è Escudo de Atenea', damage: 1.3, description: 'Usa su escudo para bloquear y contraatacar' },
                { name: '‚öîÔ∏è Espada de la Verdad', damage: 1.6, description: 'Ataca con su espada m√°gica' },
                { name: 'üí´ Lazo de la Verdad', damage: 1.4, description: 'Enlaza al oponente con su lazo m√°gico' }
            ],
            'Flash': [
                { name: '‚ö° Velocidad de la Luz', damage: 1.5, description: 'Ataca a velocidad supers√≥nica' },
                { name: 'üå™Ô∏è Tornado de Velocidad', damage: 1.8, description: 'Crea un tornado girando a alta velocidad' },
                { name: 'üí® Viento de Velocidad', damage: 1.3, description: 'Genera vientos fuertes con su velocidad' }
            ],
            'Thor': [
                { name: '‚ö° Rayo de Thor', damage: 1.6, description: 'Invoca un rayo del cielo' },
                { name: 'üî® Martillo Mjolnir', damage: 1.8, description: 'Lanza su martillo con fuerza divina' },
                { name: 'üå©Ô∏è Tormenta de Truenos', damage: 2.0, description: 'Crea una tormenta el√©ctrica devastadora' }
            ],
            'Hulk': [
                { name: 'üíö Ira Incre√≠ble', damage: 1.7, description: 'Se enfurece y aumenta su fuerza' },
                { name: 'üëä Pu√±etazo Hulk', damage: 1.9, description: 'Un pu√±etazo con toda su fuerza' },
                { name: 'üí• Destrucci√≥n Total', damage: 2.2, description: 'Destruye todo a su paso' }
            ],
            'Black Widow': [
                { name: 'üî´ Pistolas Duales', damage: 1.2, description: 'Dispara con ambas pistolas' },
                { name: '‚ö° Bracaletes El√©ctricos', damage: 1.4, description: 'Descarga electricidad desde sus brazaletes' },
                { name: 'ü•ã Combate Cercano', damage: 1.5, description: 'Usa t√©cnicas de combate cuerpo a cuerpo' }
            ],
            'Captain America': [
                { name: 'üõ°Ô∏è Escudo de Vibranium', damage: 1.3, description: 'Lanza su escudo como proyectil' },
                { name: 'üí™ Fuerza Supersoldado', damage: 1.5, description: 'Usa su fuerza mejorada' },
                { name: '‚öîÔ∏è T√©cnica de Combate', damage: 1.4, description: 'Combina escudo y combate cuerpo a cuerpo' }
            ]
        };
        
        return attacks[this.alias] || [
            { name: 'üëä Pu√±etazo B√°sico', damage: 1.0, description: 'Un pu√±etazo est√°ndar' },
            { name: 'ü¶µ Patada', damage: 1.1, description: 'Una patada poderosa' },
            { name: 'üí• Ataque Especial', damage: 1.3, description: 'Un ataque especial del personaje' }
        ];
    }

    getRandomAttack() {
        const attack = this.specialAttacks[Math.floor(Math.random() * this.specialAttacks.length)];
        return {
            ...attack,
            baseDamage: this.stats.attack
        };
    }

    takeDamage(damage) {
        const actualDamage = Math.max(1, damage - this.stats.defense);
        this.stats.health = Math.max(0, this.stats.health - actualDamage);
        return actualDamage;
    }

    heal(amount) {
        this.stats.health = Math.min(this.stats.maxHealth, this.stats.health + amount);
    }

    isAlive() {
        return this.stats.health > 0;
    }

    resetHealth() {
        this.stats.health = this.stats.maxHealth;
    }
}

export default Character; 